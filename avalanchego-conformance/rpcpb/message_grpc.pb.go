// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: rpcpb/message.proto

package rpcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MessageService_AcceptedFrontier_FullMethodName        = "/rpcpb.MessageService/AcceptedFrontier"
	MessageService_AcceptedStateSummary_FullMethodName    = "/rpcpb.MessageService/AcceptedStateSummary"
	MessageService_Accepted_FullMethodName                = "/rpcpb.MessageService/Accepted"
	MessageService_Ancestors_FullMethodName               = "/rpcpb.MessageService/Ancestors"
	MessageService_AppGossip_FullMethodName               = "/rpcpb.MessageService/AppGossip"
	MessageService_AppRequest_FullMethodName              = "/rpcpb.MessageService/AppRequest"
	MessageService_AppResponse_FullMethodName             = "/rpcpb.MessageService/AppResponse"
	MessageService_Chits_FullMethodName                   = "/rpcpb.MessageService/Chits"
	MessageService_GetAcceptedFrontier_FullMethodName     = "/rpcpb.MessageService/GetAcceptedFrontier"
	MessageService_GetAcceptedStateSummary_FullMethodName = "/rpcpb.MessageService/GetAcceptedStateSummary"
	MessageService_GetAccepted_FullMethodName             = "/rpcpb.MessageService/GetAccepted"
	MessageService_GetAncestors_FullMethodName            = "/rpcpb.MessageService/GetAncestors"
	MessageService_GetStateSummaryFrontier_FullMethodName = "/rpcpb.MessageService/GetStateSummaryFrontier"
	MessageService_Get_FullMethodName                     = "/rpcpb.MessageService/Get"
	MessageService_Peerlist_FullMethodName                = "/rpcpb.MessageService/Peerlist"
	MessageService_Ping_FullMethodName                    = "/rpcpb.MessageService/Ping"
	MessageService_Pong_FullMethodName                    = "/rpcpb.MessageService/Pong"
	MessageService_PullQuery_FullMethodName               = "/rpcpb.MessageService/PullQuery"
	MessageService_PushQuery_FullMethodName               = "/rpcpb.MessageService/PushQuery"
	MessageService_Put_FullMethodName                     = "/rpcpb.MessageService/Put"
	MessageService_StateSummaryFrontier_FullMethodName    = "/rpcpb.MessageService/StateSummaryFrontier"
	MessageService_Version_FullMethodName                 = "/rpcpb.MessageService/Version"
)

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	AcceptedFrontier(ctx context.Context, in *AcceptedFrontierRequest, opts ...grpc.CallOption) (*AcceptedFrontierResponse, error)
	AcceptedStateSummary(ctx context.Context, in *AcceptedStateSummaryRequest, opts ...grpc.CallOption) (*AcceptedStateSummaryResponse, error)
	Accepted(ctx context.Context, in *AcceptedRequest, opts ...grpc.CallOption) (*AcceptedResponse, error)
	Ancestors(ctx context.Context, in *AncestorsRequest, opts ...grpc.CallOption) (*AncestorsResponse, error)
	AppGossip(ctx context.Context, in *AppGossipRequest, opts ...grpc.CallOption) (*AppGossipResponse, error)
	AppRequest(ctx context.Context, in *AppRequestRequest, opts ...grpc.CallOption) (*AppRequestResponse, error)
	AppResponse(ctx context.Context, in *AppResponseRequest, opts ...grpc.CallOption) (*AppResponseResponse, error)
	Chits(ctx context.Context, in *ChitsRequest, opts ...grpc.CallOption) (*ChitsResponse, error)
	GetAcceptedFrontier(ctx context.Context, in *GetAcceptedFrontierRequest, opts ...grpc.CallOption) (*GetAcceptedFrontierResponse, error)
	GetAcceptedStateSummary(ctx context.Context, in *GetAcceptedStateSummaryRequest, opts ...grpc.CallOption) (*GetAcceptedStateSummaryResponse, error)
	GetAccepted(ctx context.Context, in *GetAcceptedRequest, opts ...grpc.CallOption) (*GetAcceptedResponse, error)
	GetAncestors(ctx context.Context, in *GetAncestorsRequest, opts ...grpc.CallOption) (*GetAncestorsResponse, error)
	GetStateSummaryFrontier(ctx context.Context, in *GetStateSummaryFrontierRequest, opts ...grpc.CallOption) (*GetStateSummaryFrontierResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Peerlist(ctx context.Context, in *PeerlistRequest, opts ...grpc.CallOption) (*PeerlistResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Pong(ctx context.Context, in *PongRequest, opts ...grpc.CallOption) (*PongResponse, error)
	PullQuery(ctx context.Context, in *PullQueryRequest, opts ...grpc.CallOption) (*PullQueryResponse, error)
	PushQuery(ctx context.Context, in *PushQueryRequest, opts ...grpc.CallOption) (*PushQueryResponse, error)
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	StateSummaryFrontier(ctx context.Context, in *StateSummaryFrontierRequest, opts ...grpc.CallOption) (*StateSummaryFrontierResponse, error)
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) AcceptedFrontier(ctx context.Context, in *AcceptedFrontierRequest, opts ...grpc.CallOption) (*AcceptedFrontierResponse, error) {
	out := new(AcceptedFrontierResponse)
	err := c.cc.Invoke(ctx, MessageService_AcceptedFrontier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) AcceptedStateSummary(ctx context.Context, in *AcceptedStateSummaryRequest, opts ...grpc.CallOption) (*AcceptedStateSummaryResponse, error) {
	out := new(AcceptedStateSummaryResponse)
	err := c.cc.Invoke(ctx, MessageService_AcceptedStateSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) Accepted(ctx context.Context, in *AcceptedRequest, opts ...grpc.CallOption) (*AcceptedResponse, error) {
	out := new(AcceptedResponse)
	err := c.cc.Invoke(ctx, MessageService_Accepted_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) Ancestors(ctx context.Context, in *AncestorsRequest, opts ...grpc.CallOption) (*AncestorsResponse, error) {
	out := new(AncestorsResponse)
	err := c.cc.Invoke(ctx, MessageService_Ancestors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) AppGossip(ctx context.Context, in *AppGossipRequest, opts ...grpc.CallOption) (*AppGossipResponse, error) {
	out := new(AppGossipResponse)
	err := c.cc.Invoke(ctx, MessageService_AppGossip_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) AppRequest(ctx context.Context, in *AppRequestRequest, opts ...grpc.CallOption) (*AppRequestResponse, error) {
	out := new(AppRequestResponse)
	err := c.cc.Invoke(ctx, MessageService_AppRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) AppResponse(ctx context.Context, in *AppResponseRequest, opts ...grpc.CallOption) (*AppResponseResponse, error) {
	out := new(AppResponseResponse)
	err := c.cc.Invoke(ctx, MessageService_AppResponse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) Chits(ctx context.Context, in *ChitsRequest, opts ...grpc.CallOption) (*ChitsResponse, error) {
	out := new(ChitsResponse)
	err := c.cc.Invoke(ctx, MessageService_Chits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetAcceptedFrontier(ctx context.Context, in *GetAcceptedFrontierRequest, opts ...grpc.CallOption) (*GetAcceptedFrontierResponse, error) {
	out := new(GetAcceptedFrontierResponse)
	err := c.cc.Invoke(ctx, MessageService_GetAcceptedFrontier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetAcceptedStateSummary(ctx context.Context, in *GetAcceptedStateSummaryRequest, opts ...grpc.CallOption) (*GetAcceptedStateSummaryResponse, error) {
	out := new(GetAcceptedStateSummaryResponse)
	err := c.cc.Invoke(ctx, MessageService_GetAcceptedStateSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetAccepted(ctx context.Context, in *GetAcceptedRequest, opts ...grpc.CallOption) (*GetAcceptedResponse, error) {
	out := new(GetAcceptedResponse)
	err := c.cc.Invoke(ctx, MessageService_GetAccepted_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetAncestors(ctx context.Context, in *GetAncestorsRequest, opts ...grpc.CallOption) (*GetAncestorsResponse, error) {
	out := new(GetAncestorsResponse)
	err := c.cc.Invoke(ctx, MessageService_GetAncestors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetStateSummaryFrontier(ctx context.Context, in *GetStateSummaryFrontierRequest, opts ...grpc.CallOption) (*GetStateSummaryFrontierResponse, error) {
	out := new(GetStateSummaryFrontierResponse)
	err := c.cc.Invoke(ctx, MessageService_GetStateSummaryFrontier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, MessageService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) Peerlist(ctx context.Context, in *PeerlistRequest, opts ...grpc.CallOption) (*PeerlistResponse, error) {
	out := new(PeerlistResponse)
	err := c.cc.Invoke(ctx, MessageService_Peerlist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, MessageService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) Pong(ctx context.Context, in *PongRequest, opts ...grpc.CallOption) (*PongResponse, error) {
	out := new(PongResponse)
	err := c.cc.Invoke(ctx, MessageService_Pong_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) PullQuery(ctx context.Context, in *PullQueryRequest, opts ...grpc.CallOption) (*PullQueryResponse, error) {
	out := new(PullQueryResponse)
	err := c.cc.Invoke(ctx, MessageService_PullQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) PushQuery(ctx context.Context, in *PushQueryRequest, opts ...grpc.CallOption) (*PushQueryResponse, error) {
	out := new(PushQueryResponse)
	err := c.cc.Invoke(ctx, MessageService_PushQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, MessageService_Put_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) StateSummaryFrontier(ctx context.Context, in *StateSummaryFrontierRequest, opts ...grpc.CallOption) (*StateSummaryFrontierResponse, error) {
	out := new(StateSummaryFrontierResponse)
	err := c.cc.Invoke(ctx, MessageService_StateSummaryFrontier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, MessageService_Version_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	AcceptedFrontier(context.Context, *AcceptedFrontierRequest) (*AcceptedFrontierResponse, error)
	AcceptedStateSummary(context.Context, *AcceptedStateSummaryRequest) (*AcceptedStateSummaryResponse, error)
	Accepted(context.Context, *AcceptedRequest) (*AcceptedResponse, error)
	Ancestors(context.Context, *AncestorsRequest) (*AncestorsResponse, error)
	AppGossip(context.Context, *AppGossipRequest) (*AppGossipResponse, error)
	AppRequest(context.Context, *AppRequestRequest) (*AppRequestResponse, error)
	AppResponse(context.Context, *AppResponseRequest) (*AppResponseResponse, error)
	Chits(context.Context, *ChitsRequest) (*ChitsResponse, error)
	GetAcceptedFrontier(context.Context, *GetAcceptedFrontierRequest) (*GetAcceptedFrontierResponse, error)
	GetAcceptedStateSummary(context.Context, *GetAcceptedStateSummaryRequest) (*GetAcceptedStateSummaryResponse, error)
	GetAccepted(context.Context, *GetAcceptedRequest) (*GetAcceptedResponse, error)
	GetAncestors(context.Context, *GetAncestorsRequest) (*GetAncestorsResponse, error)
	GetStateSummaryFrontier(context.Context, *GetStateSummaryFrontierRequest) (*GetStateSummaryFrontierResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Peerlist(context.Context, *PeerlistRequest) (*PeerlistResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Pong(context.Context, *PongRequest) (*PongResponse, error)
	PullQuery(context.Context, *PullQueryRequest) (*PullQueryResponse, error)
	PushQuery(context.Context, *PushQueryRequest) (*PushQueryResponse, error)
	Put(context.Context, *PutRequest) (*PutResponse, error)
	StateSummaryFrontier(context.Context, *StateSummaryFrontierRequest) (*StateSummaryFrontierResponse, error)
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (UnimplementedMessageServiceServer) AcceptedFrontier(context.Context, *AcceptedFrontierRequest) (*AcceptedFrontierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptedFrontier not implemented")
}
func (UnimplementedMessageServiceServer) AcceptedStateSummary(context.Context, *AcceptedStateSummaryRequest) (*AcceptedStateSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptedStateSummary not implemented")
}
func (UnimplementedMessageServiceServer) Accepted(context.Context, *AcceptedRequest) (*AcceptedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accepted not implemented")
}
func (UnimplementedMessageServiceServer) Ancestors(context.Context, *AncestorsRequest) (*AncestorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ancestors not implemented")
}
func (UnimplementedMessageServiceServer) AppGossip(context.Context, *AppGossipRequest) (*AppGossipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppGossip not implemented")
}
func (UnimplementedMessageServiceServer) AppRequest(context.Context, *AppRequestRequest) (*AppRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppRequest not implemented")
}
func (UnimplementedMessageServiceServer) AppResponse(context.Context, *AppResponseRequest) (*AppResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppResponse not implemented")
}
func (UnimplementedMessageServiceServer) Chits(context.Context, *ChitsRequest) (*ChitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chits not implemented")
}
func (UnimplementedMessageServiceServer) GetAcceptedFrontier(context.Context, *GetAcceptedFrontierRequest) (*GetAcceptedFrontierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAcceptedFrontier not implemented")
}
func (UnimplementedMessageServiceServer) GetAcceptedStateSummary(context.Context, *GetAcceptedStateSummaryRequest) (*GetAcceptedStateSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAcceptedStateSummary not implemented")
}
func (UnimplementedMessageServiceServer) GetAccepted(context.Context, *GetAcceptedRequest) (*GetAcceptedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccepted not implemented")
}
func (UnimplementedMessageServiceServer) GetAncestors(context.Context, *GetAncestorsRequest) (*GetAncestorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAncestors not implemented")
}
func (UnimplementedMessageServiceServer) GetStateSummaryFrontier(context.Context, *GetStateSummaryFrontierRequest) (*GetStateSummaryFrontierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStateSummaryFrontier not implemented")
}
func (UnimplementedMessageServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMessageServiceServer) Peerlist(context.Context, *PeerlistRequest) (*PeerlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Peerlist not implemented")
}
func (UnimplementedMessageServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedMessageServiceServer) Pong(context.Context, *PongRequest) (*PongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pong not implemented")
}
func (UnimplementedMessageServiceServer) PullQuery(context.Context, *PullQueryRequest) (*PullQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullQuery not implemented")
}
func (UnimplementedMessageServiceServer) PushQuery(context.Context, *PushQueryRequest) (*PushQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushQuery not implemented")
}
func (UnimplementedMessageServiceServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedMessageServiceServer) StateSummaryFrontier(context.Context, *StateSummaryFrontierRequest) (*StateSummaryFrontierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateSummaryFrontier not implemented")
}
func (UnimplementedMessageServiceServer) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_AcceptedFrontier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptedFrontierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).AcceptedFrontier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_AcceptedFrontier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).AcceptedFrontier(ctx, req.(*AcceptedFrontierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_AcceptedStateSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptedStateSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).AcceptedStateSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_AcceptedStateSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).AcceptedStateSummary(ctx, req.(*AcceptedStateSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_Accepted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).Accepted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_Accepted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).Accepted(ctx, req.(*AcceptedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_Ancestors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AncestorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).Ancestors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_Ancestors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).Ancestors(ctx, req.(*AncestorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_AppGossip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppGossipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).AppGossip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_AppGossip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).AppGossip(ctx, req.(*AppGossipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_AppRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).AppRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_AppRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).AppRequest(ctx, req.(*AppRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_AppResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).AppResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_AppResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).AppResponse(ctx, req.(*AppResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_Chits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).Chits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_Chits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).Chits(ctx, req.(*ChitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetAcceptedFrontier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAcceptedFrontierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetAcceptedFrontier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_GetAcceptedFrontier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetAcceptedFrontier(ctx, req.(*GetAcceptedFrontierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetAcceptedStateSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAcceptedStateSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetAcceptedStateSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_GetAcceptedStateSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetAcceptedStateSummary(ctx, req.(*GetAcceptedStateSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetAccepted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAcceptedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetAccepted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_GetAccepted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetAccepted(ctx, req.(*GetAcceptedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetAncestors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAncestorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetAncestors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_GetAncestors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetAncestors(ctx, req.(*GetAncestorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetStateSummaryFrontier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateSummaryFrontierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetStateSummaryFrontier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_GetStateSummaryFrontier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetStateSummaryFrontier(ctx, req.(*GetStateSummaryFrontierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_Peerlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).Peerlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_Peerlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).Peerlist(ctx, req.(*PeerlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_Pong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).Pong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_Pong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).Pong(ctx, req.(*PongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_PullQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).PullQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_PullQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).PullQuery(ctx, req.(*PullQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_PushQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).PushQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_PushQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).PushQuery(ctx, req.(*PushQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_StateSummaryFrontier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateSummaryFrontierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).StateSummaryFrontier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_StateSummaryFrontier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).StateSummaryFrontier(ctx, req.(*StateSummaryFrontierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcceptedFrontier",
			Handler:    _MessageService_AcceptedFrontier_Handler,
		},
		{
			MethodName: "AcceptedStateSummary",
			Handler:    _MessageService_AcceptedStateSummary_Handler,
		},
		{
			MethodName: "Accepted",
			Handler:    _MessageService_Accepted_Handler,
		},
		{
			MethodName: "Ancestors",
			Handler:    _MessageService_Ancestors_Handler,
		},
		{
			MethodName: "AppGossip",
			Handler:    _MessageService_AppGossip_Handler,
		},
		{
			MethodName: "AppRequest",
			Handler:    _MessageService_AppRequest_Handler,
		},
		{
			MethodName: "AppResponse",
			Handler:    _MessageService_AppResponse_Handler,
		},
		{
			MethodName: "Chits",
			Handler:    _MessageService_Chits_Handler,
		},
		{
			MethodName: "GetAcceptedFrontier",
			Handler:    _MessageService_GetAcceptedFrontier_Handler,
		},
		{
			MethodName: "GetAcceptedStateSummary",
			Handler:    _MessageService_GetAcceptedStateSummary_Handler,
		},
		{
			MethodName: "GetAccepted",
			Handler:    _MessageService_GetAccepted_Handler,
		},
		{
			MethodName: "GetAncestors",
			Handler:    _MessageService_GetAncestors_Handler,
		},
		{
			MethodName: "GetStateSummaryFrontier",
			Handler:    _MessageService_GetStateSummaryFrontier_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _MessageService_Get_Handler,
		},
		{
			MethodName: "Peerlist",
			Handler:    _MessageService_Peerlist_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _MessageService_Ping_Handler,
		},
		{
			MethodName: "Pong",
			Handler:    _MessageService_Pong_Handler,
		},
		{
			MethodName: "PullQuery",
			Handler:    _MessageService_PullQuery_Handler,
		},
		{
			MethodName: "PushQuery",
			Handler:    _MessageService_PushQuery_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _MessageService_Put_Handler,
		},
		{
			MethodName: "StateSummaryFrontier",
			Handler:    _MessageService_StateSummaryFrontier_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _MessageService_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcpb/message.proto",
}
