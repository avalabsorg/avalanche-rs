// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: rpcpb/key.proto

package rpcpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CertificateToNodeIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificate []byte `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
	NodeId      []byte `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *CertificateToNodeIdRequest) Reset() {
	*x = CertificateToNodeIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcpb_key_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateToNodeIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateToNodeIdRequest) ProtoMessage() {}

func (x *CertificateToNodeIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpcpb_key_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateToNodeIdRequest.ProtoReflect.Descriptor instead.
func (*CertificateToNodeIdRequest) Descriptor() ([]byte, []int) {
	return file_rpcpb_key_proto_rawDescGZIP(), []int{0}
}

func (x *CertificateToNodeIdRequest) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *CertificateToNodeIdRequest) GetNodeId() []byte {
	if x != nil {
		return x.NodeId
	}
	return nil
}

type CertificateToNodeIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpectedNodeId []byte `protobuf:"bytes,1,opt,name=expected_node_id,json=expectedNodeId,proto3" json:"expected_node_id,omitempty"`
	Message        string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Success        bool   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *CertificateToNodeIdResponse) Reset() {
	*x = CertificateToNodeIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcpb_key_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateToNodeIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateToNodeIdResponse) ProtoMessage() {}

func (x *CertificateToNodeIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpcpb_key_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateToNodeIdResponse.ProtoReflect.Descriptor instead.
func (*CertificateToNodeIdResponse) Descriptor() ([]byte, []int) {
	return file_rpcpb_key_proto_rawDescGZIP(), []int{1}
}

func (x *CertificateToNodeIdResponse) GetExpectedNodeId() []byte {
	if x != nil {
		return x.ExpectedNodeId
	}
	return nil
}

func (x *CertificateToNodeIdResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CertificateToNodeIdResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type Secp256K1RecoverHashPublicKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message              []byte `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Signature            []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	PublicKeyShortIdCb58 string `protobuf:"bytes,3,opt,name=public_key_short_id_cb58,json=publicKeyShortIdCb58,proto3" json:"public_key_short_id_cb58,omitempty"`
}

func (x *Secp256K1RecoverHashPublicKeyRequest) Reset() {
	*x = Secp256K1RecoverHashPublicKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcpb_key_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Secp256K1RecoverHashPublicKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secp256K1RecoverHashPublicKeyRequest) ProtoMessage() {}

func (x *Secp256K1RecoverHashPublicKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpcpb_key_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secp256K1RecoverHashPublicKeyRequest.ProtoReflect.Descriptor instead.
func (*Secp256K1RecoverHashPublicKeyRequest) Descriptor() ([]byte, []int) {
	return file_rpcpb_key_proto_rawDescGZIP(), []int{2}
}

func (x *Secp256K1RecoverHashPublicKeyRequest) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Secp256K1RecoverHashPublicKeyRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Secp256K1RecoverHashPublicKeyRequest) GetPublicKeyShortIdCb58() string {
	if x != nil {
		return x.PublicKeyShortIdCb58
	}
	return ""
}

type Secp256K1RecoverHashPublicKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpectedPublicKeyShortIdCb58 string `protobuf:"bytes,1,opt,name=expected_public_key_short_id_cb58,json=expectedPublicKeyShortIdCb58,proto3" json:"expected_public_key_short_id_cb58,omitempty"`
	Message                      string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Success                      bool   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *Secp256K1RecoverHashPublicKeyResponse) Reset() {
	*x = Secp256K1RecoverHashPublicKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcpb_key_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Secp256K1RecoverHashPublicKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secp256K1RecoverHashPublicKeyResponse) ProtoMessage() {}

func (x *Secp256K1RecoverHashPublicKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpcpb_key_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secp256K1RecoverHashPublicKeyResponse.ProtoReflect.Descriptor instead.
func (*Secp256K1RecoverHashPublicKeyResponse) Descriptor() ([]byte, []int) {
	return file_rpcpb_key_proto_rawDescGZIP(), []int{3}
}

func (x *Secp256K1RecoverHashPublicKeyResponse) GetExpectedPublicKeyShortIdCb58() string {
	if x != nil {
		return x.ExpectedPublicKeyShortIdCb58
	}
	return ""
}

func (x *Secp256K1RecoverHashPublicKeyResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Secp256K1RecoverHashPublicKeyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type Secp256K1InfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secp256K1Info *Secp256K1Info `protobuf:"bytes,1,opt,name=secp256k1_info,json=secp256k1Info,proto3" json:"secp256k1_info,omitempty"`
}

func (x *Secp256K1InfoRequest) Reset() {
	*x = Secp256K1InfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcpb_key_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Secp256K1InfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secp256K1InfoRequest) ProtoMessage() {}

func (x *Secp256K1InfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpcpb_key_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secp256K1InfoRequest.ProtoReflect.Descriptor instead.
func (*Secp256K1InfoRequest) Descriptor() ([]byte, []int) {
	return file_rpcpb_key_proto_rawDescGZIP(), []int{4}
}

func (x *Secp256K1InfoRequest) GetSecp256K1Info() *Secp256K1Info {
	if x != nil {
		return x.Secp256K1Info
	}
	return nil
}

type Secp256K1InfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpectedSecp256K1Info *Secp256K1Info `protobuf:"bytes,1,opt,name=expected_secp256k1_info,json=expectedSecp256k1Info,proto3" json:"expected_secp256k1_info,omitempty"`
	Message               string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Success               bool           `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *Secp256K1InfoResponse) Reset() {
	*x = Secp256K1InfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcpb_key_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Secp256K1InfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secp256K1InfoResponse) ProtoMessage() {}

func (x *Secp256K1InfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpcpb_key_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secp256K1InfoResponse.ProtoReflect.Descriptor instead.
func (*Secp256K1InfoResponse) Descriptor() ([]byte, []int) {
	return file_rpcpb_key_proto_rawDescGZIP(), []int{5}
}

func (x *Secp256K1InfoResponse) GetExpectedSecp256K1Info() *Secp256K1Info {
	if x != nil {
		return x.ExpectedSecp256K1Info
	}
	return nil
}

func (x *Secp256K1InfoResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Secp256K1InfoResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type Secp256K1Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyType        string `protobuf:"bytes,1,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
	PrivateKeyCb58 string `protobuf:"bytes,2,opt,name=private_key_cb58,json=privateKeyCb58,proto3" json:"private_key_cb58,omitempty"`
	PrivateKeyHex  string `protobuf:"bytes,3,opt,name=private_key_hex,json=privateKeyHex,proto3" json:"private_key_hex,omitempty"`
	// Map from network ID to its chain addresses.
	ChainAddresses map[uint32]*ChainAddresses `protobuf:"bytes,4,rep,name=chain_addresses,json=chainAddresses,proto3" json:"chain_addresses,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ShortAddress   string                     `protobuf:"bytes,5,opt,name=short_address,json=shortAddress,proto3" json:"short_address,omitempty"`
	EthAddress     string                     `protobuf:"bytes,6,opt,name=eth_address,json=ethAddress,proto3" json:"eth_address,omitempty"`
}

func (x *Secp256K1Info) Reset() {
	*x = Secp256K1Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcpb_key_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Secp256K1Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secp256K1Info) ProtoMessage() {}

func (x *Secp256K1Info) ProtoReflect() protoreflect.Message {
	mi := &file_rpcpb_key_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secp256K1Info.ProtoReflect.Descriptor instead.
func (*Secp256K1Info) Descriptor() ([]byte, []int) {
	return file_rpcpb_key_proto_rawDescGZIP(), []int{6}
}

func (x *Secp256K1Info) GetKeyType() string {
	if x != nil {
		return x.KeyType
	}
	return ""
}

func (x *Secp256K1Info) GetPrivateKeyCb58() string {
	if x != nil {
		return x.PrivateKeyCb58
	}
	return ""
}

func (x *Secp256K1Info) GetPrivateKeyHex() string {
	if x != nil {
		return x.PrivateKeyHex
	}
	return ""
}

func (x *Secp256K1Info) GetChainAddresses() map[uint32]*ChainAddresses {
	if x != nil {
		return x.ChainAddresses
	}
	return nil
}

func (x *Secp256K1Info) GetShortAddress() string {
	if x != nil {
		return x.ShortAddress
	}
	return ""
}

func (x *Secp256K1Info) GetEthAddress() string {
	if x != nil {
		return x.EthAddress
	}
	return ""
}

type ChainAddresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X string `protobuf:"bytes,1,opt,name=x,proto3" json:"x,omitempty"`
	P string `protobuf:"bytes,2,opt,name=p,proto3" json:"p,omitempty"`
}

func (x *ChainAddresses) Reset() {
	*x = ChainAddresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcpb_key_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainAddresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainAddresses) ProtoMessage() {}

func (x *ChainAddresses) ProtoReflect() protoreflect.Message {
	mi := &file_rpcpb_key_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainAddresses.ProtoReflect.Descriptor instead.
func (*ChainAddresses) Descriptor() ([]byte, []int) {
	return file_rpcpb_key_proto_rawDescGZIP(), []int{7}
}

func (x *ChainAddresses) GetX() string {
	if x != nil {
		return x.X
	}
	return ""
}

func (x *ChainAddresses) GetP() string {
	if x != nil {
		return x.P
	}
	return ""
}

type BlsSignatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateKey                 []byte `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	PublicKey                  []byte `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Message                    []byte `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Signature                  []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	SignatureProofOfPossession []byte `protobuf:"bytes,5,opt,name=signature_proof_of_possession,json=signatureProofOfPossession,proto3" json:"signature_proof_of_possession,omitempty"`
}

func (x *BlsSignatureRequest) Reset() {
	*x = BlsSignatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcpb_key_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlsSignatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlsSignatureRequest) ProtoMessage() {}

func (x *BlsSignatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpcpb_key_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlsSignatureRequest.ProtoReflect.Descriptor instead.
func (*BlsSignatureRequest) Descriptor() ([]byte, []int) {
	return file_rpcpb_key_proto_rawDescGZIP(), []int{8}
}

func (x *BlsSignatureRequest) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *BlsSignatureRequest) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *BlsSignatureRequest) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *BlsSignatureRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *BlsSignatureRequest) GetSignatureProofOfPossession() []byte {
	if x != nil {
		return x.SignatureProofOfPossession
	}
	return nil
}

type BlsSignatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *BlsSignatureResponse) Reset() {
	*x = BlsSignatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcpb_key_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlsSignatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlsSignatureResponse) ProtoMessage() {}

func (x *BlsSignatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpcpb_key_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlsSignatureResponse.ProtoReflect.Descriptor instead.
func (*BlsSignatureResponse) Descriptor() ([]byte, []int) {
	return file_rpcpb_key_proto_rawDescGZIP(), []int{9}
}

func (x *BlsSignatureResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BlsSignatureResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_rpcpb_key_proto protoreflect.FileDescriptor

var file_rpcpb_key_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x72, 0x70, 0x63, 0x70, 0x62, 0x22, 0x57, 0x0a, 0x1a, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x22, 0x7b, 0x0a, 0x1b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x96,
	0x01, 0x0a, 0x24, 0x53, 0x65, 0x63, 0x70, 0x32, 0x35, 0x36, 0x6b, 0x31, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x36, 0x0a, 0x18, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x62, 0x35, 0x38, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x43, 0x62, 0x35, 0x38, 0x22, 0xa4, 0x01, 0x0a, 0x25, 0x53, 0x65, 0x63, 0x70,
	0x32, 0x35, 0x36, 0x6b, 0x31, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x47, 0x0a, 0x21, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x5f, 0x63, 0x62, 0x35, 0x38, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x43, 0x62, 0x35, 0x38, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x53,
	0x0a, 0x14, 0x53, 0x65, 0x63, 0x70, 0x32, 0x35, 0x36, 0x6b, 0x31, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x70, 0x32, 0x35,
	0x36, 0x6b, 0x31, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x70, 0x32, 0x35, 0x36, 0x6b, 0x31,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x70, 0x32, 0x35, 0x36, 0x6b, 0x31, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x99, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x63, 0x70, 0x32, 0x35, 0x36, 0x6b,
	0x31, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a,
	0x17, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x70, 0x32, 0x35,
	0x36, 0x6b, 0x31, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x70, 0x32, 0x35, 0x36, 0x6b, 0x31,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65,
	0x63, 0x70, 0x32, 0x35, 0x36, 0x6b, 0x31, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0xef, 0x02, 0x0a, 0x0d, 0x53, 0x65, 0x63, 0x70, 0x32, 0x35, 0x36, 0x6b, 0x31, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x62, 0x35, 0x38,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x43, 0x62, 0x35, 0x38, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x48, 0x65, 0x78, 0x12, 0x51,
	0x0a, 0x0f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e,
	0x53, 0x65, 0x63, 0x70, 0x32, 0x35, 0x36, 0x6b, 0x31, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x74, 0x68, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x74, 0x68,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x58, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x2c, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x70, 0x22,
	0xd0, 0x01, 0x0a, 0x13, 0x42, 0x6c, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x41, 0x0a, 0x1d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x50, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x14, 0x42, 0x6c, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0x83,
	0x03, 0x0a, 0x0a, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5e, 0x0a,
	0x13, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x21, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a,
	0x1d, 0x53, 0x65, 0x63, 0x70, 0x32, 0x35, 0x36, 0x6b, 0x31, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x48, 0x61, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x2b,
	0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x70, 0x32, 0x35, 0x36, 0x6b, 0x31,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x70, 0x32, 0x35, 0x36, 0x6b, 0x31, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0d, 0x53,
	0x65, 0x63, 0x70, 0x32, 0x35, 0x36, 0x6b, 0x31, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x72,
	0x70, 0x63, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x70, 0x32, 0x35, 0x36, 0x6b, 0x31, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x70, 0x63, 0x70,
	0x62, 0x2e, 0x53, 0x65, 0x63, 0x70, 0x32, 0x35, 0x36, 0x6b, 0x31, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0c, 0x42, 0x6c, 0x73,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x2e, 0x72, 0x70, 0x63, 0x70,
	0x62, 0x2e, 0x42, 0x6c, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x42, 0x6c,
	0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x42, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x76, 0x61, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x61, 0x76, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x68, 0x65, 0x2d, 0x72, 0x75, 0x73, 0x74, 0x2f, 0x61, 0x76, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x68, 0x65, 0x67, 0x6f, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x3b, 0x72, 0x70, 0x63, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpcpb_key_proto_rawDescOnce sync.Once
	file_rpcpb_key_proto_rawDescData = file_rpcpb_key_proto_rawDesc
)

func file_rpcpb_key_proto_rawDescGZIP() []byte {
	file_rpcpb_key_proto_rawDescOnce.Do(func() {
		file_rpcpb_key_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpcpb_key_proto_rawDescData)
	})
	return file_rpcpb_key_proto_rawDescData
}

var file_rpcpb_key_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_rpcpb_key_proto_goTypes = []interface{}{
	(*CertificateToNodeIdRequest)(nil),            // 0: rpcpb.CertificateToNodeIdRequest
	(*CertificateToNodeIdResponse)(nil),           // 1: rpcpb.CertificateToNodeIdResponse
	(*Secp256K1RecoverHashPublicKeyRequest)(nil),  // 2: rpcpb.Secp256k1RecoverHashPublicKeyRequest
	(*Secp256K1RecoverHashPublicKeyResponse)(nil), // 3: rpcpb.Secp256k1RecoverHashPublicKeyResponse
	(*Secp256K1InfoRequest)(nil),                  // 4: rpcpb.Secp256k1InfoRequest
	(*Secp256K1InfoResponse)(nil),                 // 5: rpcpb.Secp256k1InfoResponse
	(*Secp256K1Info)(nil),                         // 6: rpcpb.Secp256k1Info
	(*ChainAddresses)(nil),                        // 7: rpcpb.ChainAddresses
	(*BlsSignatureRequest)(nil),                   // 8: rpcpb.BlsSignatureRequest
	(*BlsSignatureResponse)(nil),                  // 9: rpcpb.BlsSignatureResponse
	nil,                                           // 10: rpcpb.Secp256k1Info.ChainAddressesEntry
}
var file_rpcpb_key_proto_depIdxs = []int32{
	6,  // 0: rpcpb.Secp256k1InfoRequest.secp256k1_info:type_name -> rpcpb.Secp256k1Info
	6,  // 1: rpcpb.Secp256k1InfoResponse.expected_secp256k1_info:type_name -> rpcpb.Secp256k1Info
	10, // 2: rpcpb.Secp256k1Info.chain_addresses:type_name -> rpcpb.Secp256k1Info.ChainAddressesEntry
	7,  // 3: rpcpb.Secp256k1Info.ChainAddressesEntry.value:type_name -> rpcpb.ChainAddresses
	0,  // 4: rpcpb.KeyService.CertificateToNodeId:input_type -> rpcpb.CertificateToNodeIdRequest
	2,  // 5: rpcpb.KeyService.Secp256k1RecoverHashPublicKey:input_type -> rpcpb.Secp256k1RecoverHashPublicKeyRequest
	4,  // 6: rpcpb.KeyService.Secp256k1Info:input_type -> rpcpb.Secp256k1InfoRequest
	8,  // 7: rpcpb.KeyService.BlsSignature:input_type -> rpcpb.BlsSignatureRequest
	1,  // 8: rpcpb.KeyService.CertificateToNodeId:output_type -> rpcpb.CertificateToNodeIdResponse
	3,  // 9: rpcpb.KeyService.Secp256k1RecoverHashPublicKey:output_type -> rpcpb.Secp256k1RecoverHashPublicKeyResponse
	5,  // 10: rpcpb.KeyService.Secp256k1Info:output_type -> rpcpb.Secp256k1InfoResponse
	9,  // 11: rpcpb.KeyService.BlsSignature:output_type -> rpcpb.BlsSignatureResponse
	8,  // [8:12] is the sub-list for method output_type
	4,  // [4:8] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_rpcpb_key_proto_init() }
func file_rpcpb_key_proto_init() {
	if File_rpcpb_key_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpcpb_key_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateToNodeIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcpb_key_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateToNodeIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcpb_key_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Secp256K1RecoverHashPublicKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcpb_key_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Secp256K1RecoverHashPublicKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcpb_key_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Secp256K1InfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcpb_key_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Secp256K1InfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcpb_key_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Secp256K1Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcpb_key_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainAddresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcpb_key_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlsSignatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcpb_key_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlsSignatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpcpb_key_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpcpb_key_proto_goTypes,
		DependencyIndexes: file_rpcpb_key_proto_depIdxs,
		MessageInfos:      file_rpcpb_key_proto_msgTypes,
	}.Build()
	File_rpcpb_key_proto = out.File
	file_rpcpb_key_proto_rawDesc = nil
	file_rpcpb_key_proto_goTypes = nil
	file_rpcpb_key_proto_depIdxs = nil
}
