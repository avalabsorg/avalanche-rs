// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: rpcpb/packer.proto

package rpcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PackerService_BuildVertex_FullMethodName = "/rpcpb.PackerService/BuildVertex"
)

// PackerServiceClient is the client API for PackerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PackerServiceClient interface {
	BuildVertex(ctx context.Context, in *BuildVertexRequest, opts ...grpc.CallOption) (*BuildVertexResponse, error)
}

type packerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPackerServiceClient(cc grpc.ClientConnInterface) PackerServiceClient {
	return &packerServiceClient{cc}
}

func (c *packerServiceClient) BuildVertex(ctx context.Context, in *BuildVertexRequest, opts ...grpc.CallOption) (*BuildVertexResponse, error) {
	out := new(BuildVertexResponse)
	err := c.cc.Invoke(ctx, PackerService_BuildVertex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PackerServiceServer is the server API for PackerService service.
// All implementations must embed UnimplementedPackerServiceServer
// for forward compatibility
type PackerServiceServer interface {
	BuildVertex(context.Context, *BuildVertexRequest) (*BuildVertexResponse, error)
	mustEmbedUnimplementedPackerServiceServer()
}

// UnimplementedPackerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPackerServiceServer struct {
}

func (UnimplementedPackerServiceServer) BuildVertex(context.Context, *BuildVertexRequest) (*BuildVertexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildVertex not implemented")
}
func (UnimplementedPackerServiceServer) mustEmbedUnimplementedPackerServiceServer() {}

// UnsafePackerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PackerServiceServer will
// result in compilation errors.
type UnsafePackerServiceServer interface {
	mustEmbedUnimplementedPackerServiceServer()
}

func RegisterPackerServiceServer(s grpc.ServiceRegistrar, srv PackerServiceServer) {
	s.RegisterService(&PackerService_ServiceDesc, srv)
}

func _PackerService_BuildVertex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildVertexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackerServiceServer).BuildVertex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackerService_BuildVertex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackerServiceServer).BuildVertex(ctx, req.(*BuildVertexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PackerService_ServiceDesc is the grpc.ServiceDesc for PackerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PackerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.PackerService",
	HandlerType: (*PackerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuildVertex",
			Handler:    _PackerService_BuildVertex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcpb/packer.proto",
}
